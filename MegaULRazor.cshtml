@using DotNetNuke.Web.DDRMenu;
@using DotNetNuke.Entities.Tabs;
@using DotNetNuke.Entities.Portals;
@using DotNetNuke.Entities.Content.Taxonomy;
@{ var root = Model.Source.root; }
@helper RenderNodes(IList<MenuNode> nodes)
{
    if (nodes.Count > 0)
    {
    <ul id="nav">
        @foreach (var node in nodes)
        {
            var classString = GetClasses(node);

            <li @classString>
                @RenderItem(node)
                @if(node.Children.Count > 0) {
                    var megaClassString = GetClasses(node, " megamenu clearfix");
                    
                    <div @megaClassString>
                        @RenderMegaNodes(node.Children)
                    </div>
                }
            </li>
        }
    </ul>
    }
}
@helper RenderMegaNodes(IList<MenuNode> nodes)
{
    foreach (var node in nodes)
    {
        var classString = GetClasses(node, " category");
        <ul>
            <li @classString>
                @RenderItem(node)
                @RenderChildNodes(node.Children)
            </li>
        </ul>
    }
}
@helper RenderChildNodes(IList<MenuNode> nodes)
{

    if (nodes.Count > 0)
    {
    <ul>
        @foreach (var node in nodes)
        {
            var classString = GetClasses(node);
            <li @classString>
                @RenderItem(node)
                @RenderChildNodes(node.Children)
            </li>
        }
    </ul>
    }
}
@helper RenderItem(MenuNode node)
{
    if (node.Enabled)
    {
    <a href="@node.Url">@node.Text</a>
    }
    else
    {
    <span>@node.Text</span>
    }
}
@functions{
    public int portalId = PortalController.GetCurrentPortalSettings().PortalId;
    public TabController tc = new TabController();

    public HtmlString GetClasses(MenuNode node)
    {
        return GetClasses(node, String.Empty);
    }

    public HtmlString GetClasses(MenuNode node, string additionalClasses)
    {
        List<string> cssClasses = GetClassList(node);
        if (String.IsNullOrEmpty(additionalClasses)){
        return new HtmlString((cssClasses.Count == 0) ?
            String.Empty :
            ("class=\"" + 
                (String.Join(" ", cssClasses.ToArray()) + 
                additionalClasses + "\"").TrimStart()));
        }
        else {
            return new HtmlString("class=\"" + 
                (String.Join(" ", cssClasses.ToArray()) + 
                additionalClasses + "\"").TrimStart());
        }
    }


    public List<string> GetClassList(MenuNode node)
    {
        var classList = new List<string>();
        if (node.Selected) { classList.Add("selected"); }
        classList.AddRange(GetTerms(node));
        //if (isRoot) { classList.Add("root"); }
        return classList;
    }

    public List<string> GetTerms(MenuNode node)
    {
        var classList = new List<string>();

        TabInfo tab = tc.GetTab(node.TabId, portalId, false);
        foreach (Term term in tab.Terms)
        {
            classList.Add(term.Name);
        }
        return classList;
    }
    
}
@RenderNodes(root.Children)
